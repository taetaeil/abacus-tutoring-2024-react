// =========== 콤마 추가
export const comma = (str: string) => str.replace(/(\d)(?=(?:\d{3})+(?!\d))/g, '$1,');

// 정규 표현식, 또는 정규식은 문자열에서 특정 문자 조합을 찾기 위한 패턴입니다.

// (\d): 이 부분은 숫자를 나타내는데 사용되는 정규식 그룹입니다. \d는 하나의 숫자를 나타내며, 괄호 ()로 감싸져 있어서 그룹화됩니다.

// (?=(?:\d{3})+(?!\d)): 이 부분은 정규식의 전방탐색(positive lookahead)을 사용하여 특정 조건을 검사합니다. 여기에서는 숫자가 나타날 때마다, 그 뒤에 세 자리 숫자가 계속 나오는지 확인하는 역할을 합니다.

// 전방탐색(lookahead)은 정규식에서 특정 패턴을 검사할 때 사용되는 일종의 조건입니다. 전방탐색은 검사는 하되, 해당 부분을 실제로 포함하지는 않습니다.
// 전방탐색은 패턴이 일치할 때만 매칭을 수행하고, 매칭된 부분은 실제로 소비되지 않습니다.
// 전방탐색에는 긍정형 전방탐색(positive lookahead)과 부정형 전방탐색(negative lookahead)이 있습니다. 여기서는 긍정형 전방탐색에 대해 설명하겠습니다.

// 긍정형 전방탐색(Positive Lookahead):
// 긍정형 전방탐색은 (?= ... ) 형태로 표현됩니다.
// 패턴 내의 일치가 발생하려면 전방탐색 부분이 일치해야 합니다.
// 일치 여부를 확인하고 나면, 실제로 검색된 부분은 결과에 포함되지 않습니다.
// 간단한 예제를 통해 설명하겠습니다. 다음 정규식은 숫자 뒤에 영문자가 오는 경우를 찾습니다.
// \d(?=[a-zA-Z])
// \d: 하나의 숫자를 나타냅니다.
// (?=[a-zA-Z]): 숫자 뒤에 영문자가 오는지를 확인하는 긍정형 전방탐색입니다. 이 부분이 일치해야 정규식이 매칭됩니다.
// 예를 들어, "123abc"에서는 3이 매칭됩니다. 여기서 3 뒤에 오는 a가 전방탐색의 조건을 충족시키기 때문입니다. 하지만 실제로 a는 매칭 결과에 포함되지 않습니다.
// 긍정형 전방탐색은 복잡한 패턴을 처리하거나 특정 조건을 검사할 때 유용하게 사용됩니다.

// (?:\d{3})+: 이 부분은 비캡처링 그룹(non-capturing group)으로, 세 자리의 숫자가 하나 이상 나오는 것을 나타냅니다. \d{3}은 세 자리의 숫자를 나타내며, (?: ... )는 그룹을 나타냅니다. +는 이 그룹이 한 번 이상 반복됨을 나타냅니다.

// (?!\d): 이 부분은 부정형 전방탐색(negative lookahead)으로, 뒤에 숫자가 나오지 않는 것을 확인합니다. 즉, 그 뒤에 더 이상 숫자가 오면 안된다는 의미입니다.

// ,: 이 부분은 단순히 쉼표(,)입니다.

// '로 감싸여 있는 $1: 이는 첫 번째 캡처 그룹에서 매칭된 값을 참조하는데 사용됩니다. 여기서는 첫 번째 캡처 그룹이 숫자를 의미하므로, 매칭된 숫자를 나타냅니다.

// 요약하면, 이 정규식은 숫자가 등장할 때마다 세 자리마다 쉼표를 추가합니다. 정규식의 구성은 숫자를 그룹화하고, 그룹 뒤에 세 자리마다 쉼표가 오도록 조건을 설정하여 이를 가능케 합니다.

// =========== 숫자가 아닌 다른 문자를 입력했을 경우
export const numType = (str: string) => {
  str = String(str);

  // 숫자와 콤마(,)를 제외한 문자
  const numberPattern = /[^\d,]+/g;

  if (numberPattern.test(str)) {
    alert('숫자만 입력해주세요');
  }
  return str.replace(/[^\d]+/g, '');
};
